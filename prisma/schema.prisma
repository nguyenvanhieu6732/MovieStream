generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/////////////////////// Account models ///////////////////////

model User {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String               @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  watchlist      Watchlist[]
  comments       Comment[]
  // relations
  subscriptions  Subscription[]       @relation("UserSubscriptions")
  payments       Payment[]            @relation("UserPayments")
  familyMemberOf SubscriptionMember[] @relation("FamilyMemberOf")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Watchlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  movieId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@unique([userId, movieId])
}

/////////////////////// Comments models ///////////////////////

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slug      String    @unique
  title     String
  content   String
  createdAt DateTime  @default(now())
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

/////////////////////// Premium models ///////////////////////

model PremiumPlan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  key          String         @unique        // e.g. "personal_month", "family_year"
  name         String
  price        Float          // price value in VND (e.g. 99000)
  currency     String         @default("VND")
  duration     String         // "month" | "year"
  maxMembers   Int            @default(1)
  description  String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String       @db.ObjectId     // who purchased (account owner)
  planId      String       @db.ObjectId
  startDate   DateTime     @default(now())
  endDate     DateTime
  status      String       @default("active") // "active" | "expired" | "canceled"
  paymentId   String?      @db.ObjectId

  owner       User         @relation("UserSubscriptions", fields: [ownerId], references: [id])
  plan        PremiumPlan  @relation(fields: [planId], references: [id])
  members     SubscriptionMember[]

  @@index([ownerId])
}

model SubscriptionMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String       @db.ObjectId
  userId         String       @db.ObjectId

  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  user           User         @relation("FamilyMemberOf", fields: [userId], references: [id])

  @@unique([subscriptionId, userId])
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  amount        Float
  currency      String   @default("VND")
  method        String   // "vnpay", "momo", "stripe", ...
  status        String   // "pending", "success", "failed"
  transactionId String?  // txnRef / external id
  metadata      Json?
  createdAt     DateTime @default(now())

  user User @relation("UserPayments", fields: [userId], references: [id])

  @@index([userId])
}
